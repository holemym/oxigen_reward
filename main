<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#F4F0E9" />
  <title>Oxigen — Your Wellness Reward</title>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&family=Inter:wght@400;500;600&display=swap" rel="stylesheet" />

  <style>
    :root {
      --bg: #F4F0E9;
      --ink: #1A1A1A;
      --text: #333333;
      --muted: #666666;
      --brand: #D1B370;
      --brand-10: rgba(209,179,112,0.1);
      --brand-08: rgba(209,179,112,0.08);
      --brand-05: rgba(209,179,112,0.05);
      --brand-02: rgba(209,179,112,0.2);
      --radius: 12px;
      --pad: 1.5rem;
    }

    * { margin: 0; padding: 0; box-sizing: border-box; }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--bg);
      color: var(--text);
      line-height: 1.6;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .container {
      max-width: 480px;
      width: 100%;
      text-align: center;
      padding: 60px 40px;
    }

    .screen {
      display: none;
      opacity: 0;
      transition: opacity 0.6s ease-out;
    }
    .screen.active { display: block; opacity: 1; }

    /* Typography */
    .heading {
      font-family: 'Playfair Display', serif;
      font-size: 2.2rem;
      font-weight: 500;
      color: var(--ink);
      margin-bottom: 1.5rem;
      line-height: 1.3;
    }
    .subheading {
      font-size: 1.1rem;
      color: var(--text);
      margin-bottom: 2rem;
      line-height: 1.75;
    }
    .fine-print {
      font-size: 0.875rem;
      color: var(--muted);
      margin-top: 2rem;
      line-height: 1.6;
    }
    .scratch-label {
      font-size: 0.95rem;
      color: var(--muted);
      margin-top: 1.5rem;
      margin-bottom: 0.5rem;
    }
    .h3 {
      font-family: 'Playfair Display', serif;
      font-size: 1.2rem;
      color: var(--ink);
      margin-bottom: 1rem;
    }
    .h4 {
      font-family: 'Playfair Display', serif;
      font-size: 1.1rem;
      color: var(--ink);
      margin-bottom: 0.75rem;
    }
    .muted { color: var(--muted); }

    /* Buttons */
    .btn {
      display: inline-block;
      padding: 16px 32px;
      border: 2px solid var(--brand);
      background: transparent;
      color: var(--brand);
      text-decoration: none;
      border-radius: 50px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: transform 0.2s ease, color 0.2s ease, background 0.2s ease;
      margin: 0.5rem;
      min-width: 200px;
    }
    .btn:hover { background: var(--brand); color: var(--bg); transform: translateY(-1px); }
    .btn:active { transform: translateY(0); }
    .btn-full { width: 100%; margin: 0.75rem 0; }
    .btn-ghost { border-style: dashed; opacity: .85; }

    /* Scratch Card */
    .scratch-container {
      position: relative;
      margin: 2rem auto;
      width: 300px;
      height: 160px;
      border-radius: var(--radius);
      overflow: hidden;
      box-shadow: 0 8px 32px rgba(209, 179, 112, 0.15);
    }
    canvas.scratch-canvas {
      position: absolute; inset: 0;
      width: 100%; height: 100%;
      cursor: grab; border-radius: var(--radius);
      touch-action: none;
    }
    canvas.scratch-canvas:active { cursor: grabbing; }

    .prize-content {
      position: absolute; inset: 0;
      display: flex; align-items: center; justify-content: center;
      background: linear-gradient(135deg, #F4F0E9 0%, #F8F4ED 100%);
      border-radius: var(--radius);
      border: 1px solid #E5DFD0;
    }
    .prize-text {
      font-family: 'Playfair Display', serif;
      font-size: 1.4rem;
      font-weight: 500;
      color: var(--ink);
      padding: 20px;
      text-align: center;
      line-height: 1.4;
    }

    .shimmer-hint {
      position: absolute; inset: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(209, 179, 112, 0.1) 50%, transparent 70%);
      animation: shimmer 3s ease-in-out infinite;
      pointer-events: none;
      border-radius: var(--radius);
    }
    .shimmer-hint.hidden { display: none; }

    @keyframes shimmer {
      0%, 100% { transform: translateX(-100%); opacity: 0; }
      50% { transform: translateX(100%); opacity: 1; }
    }

    /* Reveal */
    .prize-reveal { opacity: 0; transform: translateY(20px); transition: all 0.8s ease-out; }
    .prize-reveal.show { opacity: 1; transform: translateY(0); }

    .redemption-info {
      margin: 2rem 0; padding: var(--pad);
      background: var(--brand-05);
      border-radius: var(--radius);
      border: 1px solid var(--brand-08);
      text-align: left;
    }
    .redemption-box {
      background: var(--brand-10);
      padding: var(--pad);
      border-radius: 8px;
      margin-bottom: 1.5rem;
      border: 1px solid var(--brand-02);
    }
    .redemption-list { font-size: .875rem; color: var(--muted); line-height: 1.5; }

    /* Email */
    form.email-section {
      margin: 2rem 0 1rem 0; padding: var(--pad);
      background: rgba(209, 179, 112, 0.03);
      border-radius: var(--radius);
      border: 1px solid var(--brand-08);
      text-align: left;
    }
    label.email-label {
      font-size: 0.95rem; color: #555; margin-bottom: 0.75rem; display: block;
    }
    .email-input {
      width: 100%; padding: 14px 18px;
      border: 1.5px solid rgba(209, 179, 112, 0.3);
      background: var(--bg);
      border-radius: 25px;
      font-size: 1rem;
      color: var(--text);
      transition: border-color .2s ease, box-shadow .2s ease;
      margin-bottom: 1rem;
    }
    .email-input::placeholder { color: #999; }
    .email-input:focus {
      outline: none;
      border-color: var(--brand);
      box-shadow: 0 0 0 3px rgba(209, 179, 112, 0.1);
    }

    .whatsapp-reminder {
      margin-top: 2rem; padding-top: 1.5rem;
      border-top: 1px solid rgba(209, 179, 112, 0.2);
    }
    .whatsapp-btn {
      font-size: 0.875rem; color: #888; text-decoration: underline;
      background: none; border: none; cursor: pointer; transition: color .2s ease;
    }
    .whatsapp-btn:hover { color: var(--brand); }

    /* Scratch particles */
    .scratch-particle {
      position: absolute;
      width: 4px; height: 4px;
      background: var(--brand);
      border-radius: 50%;
      pointer-events: none;
      animation: particle-fall 0.8s ease-out forwards;
    }
    @keyframes particle-fall {
      0% { opacity: 1; transform: translateY(0) rotate(0deg) scale(1); }
      50% { opacity: 0.8; transform: translateY(10px) rotate(180deg) scale(0.8); }
      100% { opacity: 0; transform: translateY(25px) rotate(360deg) scale(0.3); }
    }

    /* Fade-in helper (landing) */
    .fade-in { opacity: 0; transform: translateY(30px); }
    .fade-in.ready { animation: fadeInUp 0.8s ease-out forwards; }
    @keyframes fadeInUp { from { opacity:0; transform: translateY(30px);} to {opacity:1; transform: translateY(0);} }

    /* Reduced motion */
    @media (prefers-reduced-motion: reduce) {
      * { animation: none !important; transition: none !important; }
    }

    /* Responsive */
    @media (max-width: 480px) {
      .container { padding: 40px 20px; }
      .heading { font-size: 1.8rem; }
      .scratch-container { width: 280px; height: 150px; }
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Screen 1: Landing -->
    <section class="screen active" id="landing" aria-labelledby="landingTitle">
      <h1 id="landingTitle" class="heading fade-in">You’ve unlocked a wellness treat.</h1>
      <p class="subheading fade-in">Scratch to reveal your Oxigen gift.</p>
      <button class="btn btn-full fade-in" type="button" id="startBtn">Reveal my gift</button>
      <p class="fine-print fade-in">Valid for travelers in Vienna. Limited-time offer.</p>
      <div style="margin-top:1rem;">
        <button class="btn btn-ghost" type="button" id="a11yRevealBtn" aria-describedby="a11yHint">
          Reveal with keyboard
        </button>
        <div id="a11yHint" class="fine-print" aria-hidden="true">If you can’t use the scratch area, use this.</div>
      </div>
    </section>

    <!-- Screen 2: Scratch Card -->
    <section class="screen" id="scratch" aria-label="Scratch card to reveal your reward">
      <div class="scratch-container" role="img" aria-label="Scratch area to reveal your reward">
        <div class="prize-content">
          <div class="prize-text" id="hiddenPrize"></div>
        </div>
        <canvas class="scratch-canvas" id="scratchCanvas" aria-hidden="true"></canvas>
        <div class="shimmer-hint" id="shimmer"></div>
      </div>
      <p class="scratch-label" id="scratchLabel">Scratch here to reveal your reward</p>
    </section>

    <!-- Screen 3: Prize Reveal -->
    <section class="screen" id="reveal" aria-labelledby="revealTitle">
      <div class="prize-reveal" id="prizeReveal">
        <h2 id="revealTitle" class="visually-hidden" style="position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden;">Your reward</h2>
        <div id="revealedPrize" class="prize-text" role="status" aria-live="polite"></div>
      </div>

      <form class="email-section" id="emailForm">
        <h3 class="h3">Save Your Reward</h3>
        <label class="email-label" for="emailInput">Enter your email to claim your reward:</label>
        <input type="email" class="email-input" placeholder="your.email@example.com" id="emailInput" required inputmode="email" autocomplete="email" />
        <button class="btn btn-full" type="submit" id="emailSubmitBtn">Send to Email</button>
        <div id="emailSuccess" aria-live="polite" style="display:none;margin-top:1rem; padding:.75rem 1rem; background: rgba(46,160,67,.1); color:#2EA043; border-radius:6px; font-size:.875rem; border:1px solid rgba(46,160,67,.2);"></div>
      </form>

      <div class="redemption-info">
        <div class="redemption-box">
          <h4 class="h4">📱 How to Claim</h4>
          <p class="muted" style="margin-bottom:1rem;">
            <strong>Screenshot this page</strong> and show it at Oxigen Vienna to claim your reward.
          </p>
          <p class="redemption-list">
            ✓ Valid for 30 days from today<br />
            ✓ One-time use only<br />
            ✓ Present screenshot at reception
          </p>
        </div>
        <button class="btn btn-full" type="button" id="mapBtn">Get Directions</button>
        <button class="btn btn-full" type="button" id="bookBtn">Book Appointment</button>
      </div>

      <div class="whatsapp-reminder">
        <p class="muted" style="margin-bottom:.75rem;">Want a quick reminder?</p>
        <button class="whatsapp-btn" type="button" id="whatsappBtn">📱 Send WhatsApp Reminder</button>
      </div>
    </section>

    <!-- Try Again (created dynamically when needed) -->
  </div>

  <script>
    /**** Config / Data ****/
    const prizes = [
      "Free Hyperbaric Oxygen Therapy Session",
      "50% Off IV Drip Therapy",
      "Free Massage Add-On",
      "Better luck next time! Try again to unlock your wellness reward."
    ];

    /* Utility: safe window.open */
    function openSafe(url) {
      window.open(url, '_blank', 'noopener,noreferrer');
    }

    /* State */
    let canvas, ctx;
    let isDrawing = false;
    let prizeRevealed = false;
    let lastX = 0, lastY = 0, lastTime = 0, currentSpeed = 0;
    let totalPixels = 0;
    let lastProgressCheck = 0;
    let offscreenProgressCanvas, offscreenCtx;

    /* Screens */
    const landing = document.getElementById('landing');
    const scratchScreen = document.getElementById('scratch');
    const reveal = document.getElementById('reveal');

    document.getElementById('startBtn').addEventListener('click', showScratchScreen);
    document.getElementById('a11yRevealBtn').addEventListener('click', () => {
      // Accessibility fallback: go straight to reveal without scratching
      selectPrize();
      landing.classList.remove('active');
      reveal.classList.add('active');
      setTimeout(() => document.getElementById('prizeReveal').classList.add('show'), 100);
    });

    document.getElementById('emailForm').addEventListener('submit', (e) => {
      e.preventDefault();
      saveReward();
    });
    document.getElementById('mapBtn').addEventListener('click', navigateToOxigen);
    document.getElementById('bookBtn').addEventListener('click', bookNow);
    document.getElementById('whatsappBtn').addEventListener('click', remindViaWhatsApp);

    /* Landing fade-ins */
    window.addEventListener('load', () => {
      document.querySelectorAll('.fade-in').forEach((el, i) => {
        setTimeout(() => el.classList.add('ready'), i * 100);
      });
    });

    function showScratchScreen() {
      landing.classList.remove('active');
      setTimeout(() => {
        scratchScreen.classList.add('active');
        initScratchCard();
      }, 250);
    }

    function resetCanvas() {
      const old = document.getElementById('scratchCanvas');
      const fresh = old.cloneNode(true);       // removes all listeners
      old.parentNode.replaceChild(fresh, old);
      return fresh;
    }

    function selectPrize() {
      // NOTE: client-side demo draw. Replace with server-chosen prize for production.
      const selectedPrize = prizes[Math.floor(Math.random() * prizes.length)];
      document.getElementById('hiddenPrize').textContent = selectedPrize;
      return selectedPrize;
    }

    function initScratchCard() {
      canvas = resetCanvas();
      ctx = canvas.getContext('2d');

      const container = canvas.parentElement;
      const rect = container.getBoundingClientRect();

      // Hi-DPI aware sizing, cap DPR to 2 for perf
      const dpr = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
      canvas.width = rect.width * dpr;
      canvas.height = rect.height * dpr;
      canvas.style.width = rect.width + 'px';
      canvas.style.height = rect.height + 'px';
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);

      // create offscreen canvas for lightweight progress checking
      offscreenProgressCanvas = document.createElement('canvas');
      offscreenProgressCanvas.width = 96;
      offscreenProgressCanvas.height = Math.max(48, Math.round(96 * (rect.height / rect.width)));
      offscreenCtx = offscreenProgressCanvas.getContext('2d');

      // Metallic scratch surface
      const gradient = ctx.createLinearGradient(0, 0, rect.width, rect.height);
      gradient.addColorStop(0, '#F2E6B8');
      gradient.addColorStop(0.15, '#E6D196');
      gradient.addColorStop(0.3, '#D1B370');
      gradient.addColorStop(0.5, '#C9A961');
      gradient.addColorStop(0.7, '#B8A055');
      gradient.addColorStop(0.85, '#A6924A');
      gradient.addColorStop(1, '#94823F');

      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, rect.width, rect.height);

      // Metallic noise
      ctx.globalCompositeOperation = 'overlay';
      for (let i = 0; i < 1000; i++) {
        ctx.fillStyle = `rgba(255,255,255,${Math.random() * 0.15})`;
        ctx.fillRect(Math.random() * rect.width, Math.random() * rect.height, 1, 1);
      }
      ctx.globalCompositeOperation = 'multiply';
      ctx.fillStyle = 'rgba(200,180,120,0.1)';
      for (let x = 0; x < rect.width; x += 3) {
        for (let y = 0; y < rect.height; y += 3) {
          if (Math.random() > 0.7) ctx.fillRect(x, y, 1, 1);
        }
      }
      ctx.globalCompositeOperation = 'source-over';

      totalPixels = canvas.width * canvas.height;

      // Select prize
      const selectedPrize = selectPrize();

      // Announce scratch instruction visually
      const shimmer = document.getElementById('shimmer');
      shimmer.classList.remove('hidden');
      document.getElementById('scratchLabel').style.opacity = '1';

      // Events
      canvas.addEventListener('mousedown', startScratch);
      canvas.addEventListener('mousemove', scratch);
      window.addEventListener('mouseup', stopScratch);
      canvas.addEventListener('touchstart', startScratch, { passive: false });
      canvas.addEventListener('touchmove', scratch, { passive: false });
      window.addEventListener('touchend', stopScratch);

      // If "no win", route to try-again after reveal
      // (We keep standard flow; logic handled in revealPrize)
      return selectedPrize;
    }

    function getCoordinates(e) {
      const rect = canvas.getBoundingClientRect();
      const p = (e.touches && e.touches[0]) || e;
      const x = (p.clientX - rect.left);
      const y = (p.clientY - rect.top);
      return { x, y };
    }

    function startScratch(e) {
      isDrawing = true;
      const shimmer = document.getElementById('shimmer');
      shimmer && shimmer.classList.add('hidden');
      document.getElementById('scratchLabel').style.opacity = '0.6';

      const { x, y } = getCoordinates(e);
      lastX = x; lastY = y; lastTime = performance.now(); currentSpeed = 0;
      scratch(e);
    }

    function scratch(e) {
      if (!isDrawing || prizeRevealed) return;
      e.preventDefault();

      const { x: currentX, y: currentY } = getCoordinates(e);
      const currentTime = performance.now();

      // speed
      const dx = currentX - lastX;
      const dy = currentY - lastY;
      const distance = Math.hypot(dx, dy);
      const timeDelta = Math.max(currentTime - lastTime, 1);
      currentSpeed = distance / timeDelta * 100;

      ctx.globalCompositeOperation = 'destination-out';
      createBrushyScratches(currentX, currentY, lastX, lastY, currentSpeed);

      if (Math.random() > 0.5) createScratchParticle(currentX, currentY);

      lastX = currentX; lastY = currentY; lastTime = currentTime;

      maybeCheckProgress();
    }

    function stopScratch() { isDrawing = false; }

    /* Throttled progress check using offscreen downscale */
    function maybeCheckProgress() {
      const now = performance.now();
      if (now - lastProgressCheck < 120) return;
      lastProgressCheck = now;
      checkScratchProgress();
    }

    function checkScratchProgress() {
      if (prizeRevealed) return;

      // Draw main canvas into offscreen tiny canvas to count alpha fast
      offscreenCtx.clearRect(0, 0, offscreenProgressCanvas.width, offscreenProgressCanvas.height);
      offscreenCtx.drawImage(
        canvas,
        0, 0, canvas.width, canvas.height,
        0, 0, offscreenProgressCanvas.width, offscreenProgressCanvas.height
      );
      const data = offscreenCtx.getImageData(0, 0, offscreenProgressCanvas.width, offscreenProgressCanvas.height).data;

      let transparent = 0;
      // alpha is every 4th byte
      for (let i = 3; i < data.length; i += 4) {
        if (data[i] === 0) transparent++;
      }
      const scratchPercentage = (transparent / (data.length / 4)) * 100;

      // Hide hint text progressively
      if (scratchPercentage > 20) document.getElementById('scratchLabel').style.opacity = '0';

      if (scratchPercentage > 60) revealPrize();
    }

    function createBrushyScratches(x, y, lastX, lastY, speed) {
      const baseSize = 35;
      const maxSize = 140;
      const speedMultiplier = Math.min(speed / 4, 1.2);
      const brushSize = baseSize + (maxSize - baseSize) * speedMultiplier;

      // "Main stroke"
      ctx.globalAlpha = (0.6 + Math.random() * 0.4) * Math.min(speed / 8 + 0.3, 1.0);
      ctx.lineWidth = brushSize * 0.6;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';

      const pathSegments = 4 + Math.floor(Math.random() * 6);
      ctx.beginPath();
      ctx.moveTo(lastX, lastY);
      for (let i = 1; i <= pathSegments; i++) {
        const progress = i / pathSegments;
        const naturalVariation = Math.sin(progress * Math.PI * 3) * 3;
        const randomJitter = (Math.random() - 0.5) * 8;
        const segX = lastX + (x - lastX) * progress + naturalVariation + randomJitter;
        const segY = lastY + (y - lastY) * progress + (Math.random() - 0.5) * 8;
        if (i === 1) ctx.quadraticCurveTo(lastX, lastY, segX, segY);
        else ctx.lineTo(segX, segY);
      }
      ctx.stroke();

      // Extra texture marks around stroke for realism
      const textureMarks = Math.floor(12 + speed / 2);
      for (let i = 0; i < textureMarks; i++) {
        const distance = Math.random() * brushSize * 1.5;
        const textureAngle = Math.random() * Math.PI * 2;
        const scratchX = x + Math.cos(textureAngle) * distance;
        const scratchY = y + Math.sin(textureAngle) * distance;
        createDetailedScratchMark(scratchX, scratchY, Math.min(speed / 8 + 0.3, 1.0));
      }

      ctx.globalAlpha = 1.0;
    }

    function createDetailedScratchMark(x, y, pressure) {
      const scratchSize = (Math.random() * 4 + 1) * pressure;
      const scratchOpacity = (Math.random() * 0.7 + 0.2) * pressure;
      const scratchAngle = Math.random() * Math.PI * 2;
      const scratchLength = (3 + Math.random() * 8) * pressure;

      ctx.globalAlpha = scratchOpacity;
      ctx.lineWidth = scratchSize;
      ctx.lineCap = Math.random() > 0.5 ? 'round' : 'square';

      ctx.beginPath();
      ctx.moveTo(x, y);
      const endX = x + Math.cos(scratchAngle) * scratchLength;
      const endY = y + Math.sin(scratchAngle) * scratchLength;
      ctx.lineTo(endX, endY);

      if (Math.random() > 0.6) {
        const branchAngle = scratchAngle + (Math.random() - 0.5) * 1.0;
        const branchLength = scratchLength * 0.3;
        const midX = x + Math.cos(scratchAngle) * scratchLength * 0.6;
        const midY = y + Math.sin(scratchAngle) * scratchLength * 0.6;
        ctx.moveTo(midX, midY);
        ctx.lineTo(midX + Math.cos(branchAngle) * branchLength, midY + Math.sin(branchAngle) * branchLength);
      }
      ctx.stroke();
      ctx.globalAlpha = 1.0;
    }

    function createScratchParticle(x, y) {
      const container = document.querySelector('.scratch-container');
      // Cap particle count for perf
      const MAX_PARTICLES = 150;
      if (container.querySelectorAll('.scratch-particle').length > MAX_PARTICLES) return;

      const count = 2 + Math.floor(Math.random() * 4);
      for (let i = 0; i < count; i++) {
        const p = document.createElement('div');
        p.className = 'scratch-particle';

        const size = 2 + Math.random() * 6;
        const opacity = 0.4 + Math.random() * 0.6;
        const hue = 40 + Math.random() * 20;

        p.style.width = size + 'px';
        p.style.height = size + 'px';
        p.style.background = `hsla(${hue}, 70%, 60%, ${opacity})`;
        p.style.left = (x + (Math.random() - 0.5) * 20) + 'px';
        p.style.top  = (y + (Math.random() - 0.5) * 20) + 'px';

        container.appendChild(p);

        setTimeout(() => p.remove(), 600 + Math.random() * 400);
      }
    }

    function revealPrize() {
      if (prizeRevealed) return;
      prizeRevealed = true;

      scratchScreen.style.opacity = '0';
      setTimeout(() => {
        scratchScreen.classList.remove('active');

        const prizeText = document.getElementById('hiddenPrize').textContent;
        const isNoWin = prizeText.includes("Better luck next time");

        if (isNoWin) {
          showTryAgainScreen();
        } else {
          reveal.classList.add('active');
          document.getElementById('revealedPrize').textContent = prizeText;
          setTimeout(() => document.getElementById('prizeReveal').classList.add('show'), 100);
        }
      }, 400);
    }

    function showTryAgainScreen() {
      let tryAgainScreen = document.getElementById('tryAgain');
      if (!tryAgainScreen) {
        tryAgainScreen = document.createElement('section');
        tryAgainScreen.id = 'tryAgain';
        tryAgainScreen.className = 'screen';
        tryAgainScreen.setAttribute('aria-labelledby', 'tryAgainTitle');
        tryAgainScreen.innerHTML = `
          <div class="prize-reveal" id="tryAgainContent">
            <h2 id="tryAgainTitle" class="heading" style="font-size:1.8rem;margin-bottom:1rem;">Not this swipe.</h2>
            <p class="subheading" style="margin-bottom:2rem;">Your wellness treat is close. Try again—everyone wins eventually.</p>
            <button class="btn btn-full" type="button" id="tryAgainBtn" style="margin-bottom:1rem;">Try Again</button>
            <p class="fine-print">For demo purposes, retries are unlimited.</p>
          </div>`;
        document.querySelector('.container').appendChild(tryAgainScreen);
        tryAgainScreen.querySelector('#tryAgainBtn').addEventListener('click', tryAgain);
      }
      tryAgainScreen.classList.add('active');
      setTimeout(() => document.getElementById('tryAgainContent').classList.add('show'), 100);
    }

    function tryAgain() {
      prizeRevealed = false;
      const tryAgain = document.getElementById('tryAgain');
      tryAgain.classList.remove('active');
      document.getElementById('tryAgainContent').classList.remove('show');

      setTimeout(() => {
        scratchScreen.classList.add('active');
        scratchScreen.style.opacity = '1';
        initScratchCard();
      }, 250);
    }

    /* Email save (demo) */
    function saveReward() {
      const emailInput = document.getElementById('emailInput');
      const email = emailInput.value.trim();
      const emailOk = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/.test(email);
      if (!emailOk) { alert('Please enter a valid email address'); return; }

      const btn = document.getElementById('emailSubmitBtn');
      const successEl = document.getElementById('emailSuccess');
      const original = btn.textContent;

      btn.textContent = 'Sending...';
      btn.disabled = true;

      // DEMO: simulate send; in production POST to server
      const prizeText = document.getElementById('revealedPrize').textContent;
      setTimeout(() => {
        btn.textContent = '✓ Sent to Email';
        btn.style.background = 'var(--brand)';
        btn.style.color = 'var(--bg)';
        btn.style.borderColor = 'var(--brand)';

        successEl.style.display = 'block';
        successEl.textContent = `Reward details sent to ${email}`;
        console.log('Email sent to:', email, 'with prize:', prizeText);

        setTimeout(() => { btn.disabled = false; btn.textContent = original; }, 3000);
      }, 1200);
    }

    function navigateToOxigen() {
      const url = 'https://maps.google.com/?q=Oxigen+Center+Vienna';
      openSafe(url);
    }

    function bookNow() {
      const url = 'https://oxigen.at/en/booking';
      openSafe(url);
    }

    function remindViaWhatsApp() {
      const email = (document.getElementById('emailInput').value || '').trim();
      const prizeText = document.getElementById('revealedPrize').textContent;
      const message = `🎁 Oxigen Vienna Reward: ${prizeText}\n\n📱 Show this message + screenshot at Oxigen Vienna\n📍 Valid for 30 days\n\n🗺️ Location: https://maps.google.com/?q=Oxigen+Center+Vienna\n🔗 Book: https://oxigen.at/en/booking`;
      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;

      if (email) console.log('Email saved for WhatsApp reminder:', email);
      openSafe(whatsappUrl);
    }

    /* --- Notes for production wiring ---
       - Replace selectPrize() with a server call that returns { prizeId, claimToken, expiresAt }.
       - On email submit, POST { email, claimToken } to lock prize.
       - Render a unique code/QR tied to claimToken & expiry.
       - Enforce retry limits server-side.
       - Add analytics beacons (impression/interaction).
    ------------------------------------- */
  </script>
</body>
</html>
