<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oxigen - Your Wellness Reward</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600&family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #F4F0E9;
            color: #333333;
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 450px;
            width: 100%;
            text-align: center;
            padding: 60px 40px;
        }

        .screen {
            display: none;
            opacity: 0;
            transition: opacity 0.6s ease-out;
        }

        .screen.active {
            display: block;
            opacity: 1;
        }

        /* Typography */
        .heading {
            font-family: 'Playfair Display', serif;
            font-size: 2.2rem;
            font-weight: 500;
            color: #1A1A1A;
            margin-bottom: 1.5rem;
            line-height: 1.3;
        }

        .subheading {
            font-size: 1.1rem;
            color: #333333;
            margin-bottom: 2rem;
            line-height: 1.75;
        }

        .fine-print {
            font-size: 0.875rem;
            color: #666666;
            margin-top: 2rem;
            line-height: 1.6;
        }

        .scratch-label {
            font-size: 0.95rem;
            color: #666666;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
        }

        /* Buttons */
        .btn {
            display: inline-block;
            padding: 16px 32px;
            border: 2px solid #D1B370;
            background: transparent;
            color: #D1B370;
            text-decoration: none;
            border-radius: 50px;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0.5rem;
            min-width: 200px;
        }

        .btn:hover {
            background: #D1B370;
            color: #F4F0E9;
            transform: translateY(-1px);
        }

        .btn-full {
            width: 100%;
            margin: 0.75rem 0;
        }

        /* Scratch Card */
        .scratch-container {
            position: relative;
            margin: 2rem auto;
            width: 300px;
            height: 160px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(209, 179, 112, 0.15);
        }

        .scratch-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            cursor: grab;
            border-radius: 12px;
        }

        .scratch-canvas:active {
            cursor: grabbing;
        }

        .prize-content {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #F4F0E9 0%, #F8F4ED 100%);
            border-radius: 12px;
            border: 1px solid #E5DFD0;
        }

        .shimmer-hint {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg,
                transparent 30%,
                rgba(209, 179, 112, 0.1) 50%,
                transparent 70%);
            animation: shimmer 3s ease-in-out infinite;
            pointer-events: none;
            border-radius: 12px;
        }

        @keyframes shimmer {
            0%, 100% { transform: translateX(-100%); opacity: 0; }
            50% { transform: translateX(100%); opacity: 1; }
        }

        /* Prize Reveal */
        .prize-text {
            font-family: 'Playfair Display', serif;
            font-size: 1.4rem;
            font-weight: 500;
            color: #1A1A1A;
            padding: 20px;
            text-align: center;
            line-height: 1.4;
        }

        .prize-reveal {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.8s ease-out;
        }

        .prize-reveal.show {
            opacity: 1;
            transform: translateY(0);
        }

        .redemption-info {
            margin: 2rem 0;
            padding: 1.5rem;
            background: rgba(209, 179, 112, 0.05);
            border-radius: 12px;
            border: 1px solid rgba(209, 179, 112, 0.1);
        }

        .redemption-text {
            font-size: 0.95rem;
            color: #555555;
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        /* Email Input */
        .email-section {
            margin: 2rem 0 1rem 0;
            padding: 1.5rem;
            background: rgba(209, 179, 112, 0.03);
            border-radius: 12px;
            border: 1px solid rgba(209, 179, 112, 0.08);
        }

        .email-label {
            font-size: 0.95rem;
            color: #555555;
            margin-bottom: 0.75rem;
            text-align: left;
        }

        .email-input {
            width: 100%;
            padding: 14px 18px;
            border: 1.5px solid rgba(209, 179, 112, 0.3);
            background: #F4F0E9;
            border-radius: 25px;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            color: #333333;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .email-input:focus {
            outline: none;
            border-color: #D1B370;
            box-shadow: 0 0 0 3px rgba(209, 179, 112, 0.1);
        }

        .email-input::placeholder {
            color: #999999;
        }

        .whatsapp-reminder {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(209, 179, 112, 0.2);
        }

        .whatsapp-btn {
            font-size: 0.875rem;
            color: #888888;
            text-decoration: underline;
            background: none;
            border: none;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .whatsapp-btn:hover {
            color: #D1B370;
        }

        /* Scratch particles */
        .scratch-particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: #D1B370;
            border-radius: 50%;
            pointer-events: none;
            animation: particle-fall 0.8s ease-out forwards;
        }

        @keyframes particle-fall {
            0% {
                opacity: 1;
                transform: translateY(0) rotate(0deg) scale(1);
            }
            50% {
                opacity: 0.8;
                transform: translateY(10px) rotate(180deg) scale(0.8);
            }
            100% {
                opacity: 0;
                transform: translateY(25px) rotate(360deg) scale(0.3);
            }
        }

        .fade-in {
            animation: fadeInUp 0.8s ease-out forwards;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @media (max-width: 480px) {
            .container {
                padding: 40px 20px;
            }
           
            .heading {
                font-size: 1.8rem;
            }
           
            .scratch-container {
                width: 280px;
                height: 150px;
            }
        }
    </style>
</head>
<body>
    <!-- Screen 1: Landing -->
    <div class="container">
        <div class="screen active" id="landing">
            <h1 class="heading fade-in">You've just unlocked a moment of reward.</h1>
            <p class="subheading fade-in">Scratch to reveal your wellness gift from Oxigen.</p>
            <button class="btn btn-full fade-in" onclick="showScratchScreen()">Reveal my gift</button>
            <p class="fine-print fade-in">Valid for travelers in Vienna. Limited-time offer.</p>
        </div>

        <!-- Screen 2: Scratch Card -->
        <div class="screen" id="scratch">
            <div class="scratch-container">
                <div class="prize-content">
                    <div class="prize-text" id="hiddenPrize"></div>
                </div>
                <canvas class="scratch-canvas" id="scratchCanvas"></canvas>
                <div class="shimmer-hint"></div>
            </div>
            <p class="scratch-label">Scratch here to reveal your reward</p>
        </div>

        <!-- Screen 3: Prize Reveal -->
        <div class="screen" id="reveal">
            <div class="prize-reveal" id="prizeReveal">
                <div class="prize-text" id="revealedPrize"></div>
            </div>
           
            <div class="email-section">
                <h3 style="font-family: 'Playfair Display', serif; font-size: 1.2rem; color: #1A1A1A; margin-bottom: 1rem;">Save Your Reward</h3>
                <p class="email-label">Enter your email to claim your reward:</p>
                <input type="email" class="email-input" placeholder="your.email@example.com" id="emailInput" required>
                <button class="btn" onclick="saveReward()" style="width: 100%; margin-top: 1rem;">Send to Email</button>
            </div>
           
            <div class="redemption-info">
                <div style="background: rgba(209, 179, 112, 0.1); padding: 1.5rem; border-radius: 8px; margin-bottom: 1.5rem; border: 1px solid rgba(209, 179, 112, 0.2);">
                    <h4 style="font-family: 'Playfair Display', serif; font-size: 1.1rem; color: #1A1A1A; margin-bottom: 0.75rem;">📱 How to Claim</h4>
                    <p style="font-size: 0.95rem; color: #555555; line-height: 1.6; margin-bottom: 1rem;">
                        <strong>Simply screenshot this page</strong> and show it at Oxigen Vienna to claim your reward.
                    </p>
                    <p style="font-size: 0.875rem; color: #666666; line-height: 1.5;">
                        ✓ Valid for 30 days from today<br>
                        ✓ One-time use only<br>
                        ✓ Present screenshot at reception
                    </p>
                </div>
                <button class="btn btn-full" onclick="navigateToOxigen()">Get Directions</button>
                <button class="btn btn-full" onclick="bookNow()">Book Appointment</button>
            </div>

            <div class="whatsapp-reminder">
                <p style="font-size: 0.875rem; color: #666666; margin-bottom: 0.75rem;">Want a quick reminder?</p>
                <button class="whatsapp-btn" onclick="remindViaWhatsApp()">📱 Send WhatsApp Reminder</button>
            </div>
        </div>
    </div>

    <script>
        const prizes = [
            "Free Hyperbaric Oxygen Therapy Session",
            "50% Off IV Drip Therapy",
            "Free Massage Add-On",
            "Better luck next time! Try again to unlock your wellness reward."
        ];

        let canvas, ctx;
        let isDrawing = false;
        let scratchedPixels = 0;
        let totalPixels = 0;
        let prizeRevealed = false;
        let lastX = 0;
        let lastY = 0;
        let lastTime = 0;
        let currentSpeed = 0;

        function showScratchScreen() {
            document.getElementById('landing').classList.remove('active');
            setTimeout(() => {
                document.getElementById('scratch').classList.add('active');
                initScratchCard();
            }, 300);
        }

        function initScratchCard() {
            canvas = document.getElementById('scratchCanvas');
            ctx = canvas.getContext('2d');
           
            // Set canvas size with higher resolution for smoother scratching
            const container = canvas.parentElement;
            const rect = container.getBoundingClientRect();
            canvas.width = rect.width * 2;
            canvas.height = rect.height * 2;
            canvas.style.width = rect.width + 'px';
            canvas.style.height = rect.height + 'px';
            ctx.scale(2, 2);
           
            // Create realistic metallic scratch surface
            const gradient = ctx.createLinearGradient(0, 0, rect.width, rect.height);
            gradient.addColorStop(0, '#F2E6B8');
            gradient.addColorStop(0.15, '#E6D196');
            gradient.addColorStop(0.3, '#D1B370');
            gradient.addColorStop(0.5, '#C9A961');
            gradient.addColorStop(0.7, '#B8A055');
            gradient.addColorStop(0.85, '#A6924A');
            gradient.addColorStop(1, '#94823F');
           
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, rect.width, rect.height);
           
            // Add metallic texture with noise
            ctx.globalCompositeOperation = 'overlay';
            for (let i = 0; i < 1000; i++) {
                const alpha = Math.random() * 0.15;
                ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
                ctx.fillRect(Math.random() * rect.width, Math.random() * rect.height, 1, 1);
            }
           
            // Add subtle grain pattern
            ctx.globalCompositeOperation = 'multiply';
            ctx.fillStyle = 'rgba(200, 180, 120, 0.1)';
            for (let x = 0; x < rect.width; x += 3) {
                for (let y = 0; y < rect.height; y += 3) {
                    if (Math.random() > 0.7) {
                        ctx.fillRect(x, y, 1, 1);
                    }
                }
            }
           
            ctx.globalCompositeOperation = 'source-over';
           
            totalPixels = canvas.width * canvas.height;
           
            // Select random prize
            const selectedPrize = prizes[Math.floor(Math.random() * prizes.length)];
            document.getElementById('hiddenPrize').textContent = selectedPrize;
           
            // Add event listeners
            canvas.addEventListener('mousedown', startScratch);
            canvas.addEventListener('mousemove', scratch);
            canvas.addEventListener('mouseup', stopScratch);
            canvas.addEventListener('mouseleave', stopScratch);
            canvas.addEventListener('touchstart', startScratch, { passive: false });
            canvas.addEventListener('touchmove', scratch, { passive: false });
            canvas.addEventListener('touchend', stopScratch);
        }

        function startScratch(e) {
            isDrawing = true;
            const coords = getCoordinates(e);
            lastX = coords.x;
            lastY = coords.y;
            lastTime = Date.now();
            currentSpeed = 0;
            scratch(e);
        }

        function getCoordinates(e) {
            const rect = canvas.getBoundingClientRect();
            const scaleX = canvas.width / rect.width;
            const scaleY = canvas.height / rect.height;
           
            const clientX = e.clientX || (e.touches && e.touches[0].clientX);
            const clientY = e.clientY || (e.touches && e.touches[0].clientY);
           
            return {
                x: (clientX - rect.left) * scaleX / 2,
                y: (clientY - rect.top) * scaleY / 2
            };
        }

        function scratch(e) {
            if (!isDrawing || prizeRevealed) return;
           
            e.preventDefault();
           
            const coords = getCoordinates(e);
            const currentX = coords.x;
            const currentY = coords.y;
            const currentTime = Date.now();
           
            // Calculate speed for dynamic brush sizing
            const distance = Math.sqrt(Math.pow(currentX - lastX, 2) + Math.pow(currentY - lastY, 2));
            const timeDelta = Math.max(currentTime - lastTime, 1);
            currentSpeed = distance / timeDelta * 100; // Scale up for better sensitivity
           
            ctx.globalCompositeOperation = 'destination-out';
           
            // Create brushy scratching pattern with speed-based sizing
            createBrushyScratches(currentX, currentY, lastX, lastY, currentSpeed);
           
            // Create scratch particles effect
            if (Math.random() > 0.5) {
                createScratchParticle(currentX * 2, currentY * 2);
            }
           
            lastX = currentX;
            lastY = currentY;
            lastTime = currentTime;
           
            // Throttle progress checking for better performance
            if (Math.random() > 0.8) {
                checkScratchProgress();
            }
        }

        function createBrushyScratches(x, y, lastX, lastY, speed) {
            // Enhanced speed-based brush sizing with more dramatic variation
            const baseSize = 35;
            const maxSize = 140;
            const speedMultiplier = Math.min(speed / 4, 1.2); // Allow slight overspeeding
            const brushSize = baseSize + (maxSize - baseSize) * speedMultiplier;
           
            // Dynamic bristle count based on speed and pressure simulation
            const bristleCount = Math.floor(20 + speed / 1.5);
            const bristleSpread = brushSize * 1.1;
           
            // Calculate movement direction and pressure simulation
            const dx = x - lastX;
            const dy = y - lastY;
            const angle = Math.atan2(dy, dx);
            const pressure = Math.min(speed / 8 + 0.3, 1.0); // Simulate pressure
           
            // Create enhanced metallic flake effects
            createMetallicFlakes(x, y, brushSize, pressure);
           
            // Main aggressive scratching pattern
            for (let i = 0; i < bristleCount; i++) {
                const bristleVariation = (Math.random() - 0.5) * 2.0; // More variation
                const bristleAngle = angle + (Math.PI / 2) + bristleVariation;
                const bristleDistance = (Math.random() - 0.5) * bristleSpread;
                const bristleX = x + Math.cos(bristleAngle) * bristleDistance + (Math.random() - 0.5) * 12;
                const bristleY = y + Math.sin(bristleAngle) * bristleDistance + (Math.random() - 0.5) * 12;
               
                // Enhanced opacity variation with pressure sensitivity
                const bristleOpacity = (0.15 + Math.random() * 0.85) * pressure;
                const bristleSize = (1 + Math.random() * 8) * pressure;
               
                ctx.globalAlpha = bristleOpacity;
               
                // Create more aggressive, jagged bristle marks
                const segments = 2 + Math.floor(Math.random() * 5);
                ctx.beginPath();
                ctx.moveTo(bristleX, bristleY);
               
                let currentX = bristleX, currentY = bristleY;
                for (let seg = 0; seg < segments; seg++) {
                    const segmentAngle = angle + (Math.random() - 0.5) * 1.2;
                    const segmentLength = (4 + Math.random() * 10) * pressure;
                    const jitterX = (Math.random() - 0.5) * 4;
                    const jitterY = (Math.random() - 0.5) * 4;
                   
                    currentX += Math.cos(segmentAngle) * segmentLength + jitterX;
                    currentY += Math.sin(segmentAngle) * segmentLength + jitterY;
                    ctx.lineTo(currentX, currentY);
                }
               
                ctx.lineWidth = bristleSize;
                ctx.lineCap = 'round'; // Mix of round and square for realism
                ctx.lineJoin = Math.random() > 0.5 ? 'round' : 'miter';
                ctx.stroke();
               
                // Enhanced random micro-scratches
                if (Math.random() > 0.4) {
                    createMicroScratches(bristleX, bristleY, pressure);
                }
            }
           
            // Enhanced main stroke with realistic scratching
            const strokeOpacity = 0.6 + Math.random() * 0.4;
            ctx.globalAlpha = strokeOpacity * pressure;
            ctx.lineWidth = brushSize * (0.4 + pressure * 0.4);
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
           
            // Create realistic scratched path with natural variation
            const pathSegments = 4 + Math.floor(Math.random() * 6);
            ctx.beginPath();
            ctx.moveTo(lastX, lastY);
           
            for (let i = 1; i <= pathSegments; i++) {
                const progress = i / pathSegments;
                const naturalVariation = Math.sin(progress * Math.PI * 3) * 3; // Natural hand movement
                const randomJitter = (Math.random() - 0.5) * 8;
                const segX = lastX + (x - lastX) * progress + naturalVariation + randomJitter;
                const segY = lastY + (y - lastY) * progress + (Math.random() - 0.5) * 8;
               
                if (i === 1) {
                    ctx.quadraticCurveTo(lastX, lastY, segX, segY);
                } else {
                    ctx.lineTo(segX, segY);
                }
            }
            ctx.stroke();
           
            // Enhanced texture marks with depth variation
            const textureMarks = Math.floor(12 + speed / 2);
            for (let i = 0; i < textureMarks; i++) {
                const distance = Math.random() * brushSize * 1.5;
                const textureAngle = Math.random() * Math.PI * 2;
                const scratchX = x + Math.cos(textureAngle) * distance;
                const scratchY = y + Math.sin(textureAngle) * distance;
               
                createDetailedScratchMark(scratchX, scratchY, pressure);
            }
           
            // Reset alpha
            ctx.globalAlpha = 1.0;
        }

        function createMetallicFlakes(x, y, brushSize, pressure) {
            // Simulate metallic coating flakes being scraped off
            const flakeCount = Math.floor(8 + pressure * 12);
           
            for (let i = 0; i < flakeCount; i++) {
                const flakeX = x + (Math.random() - 0.5) * brushSize * 1.8;
                const flakeY = y + (Math.random() - 0.5) * brushSize * 1.8;
                const flakeSize = Math.random() * 3 + 1;
                const flakeOpacity = Math.random() * 0.8 + 0.2;
               
                ctx.globalAlpha = flakeOpacity * pressure;
               
                // Create irregular flake shapes
                ctx.beginPath();
                const sides = 3 + Math.floor(Math.random() * 4);
                const radius = flakeSize;
               
                for (let j = 0; j < sides; j++) {
                    const angle = (j / sides) * Math.PI * 2;
                    const variation = 0.7 + Math.random() * 0.6; // Irregular shape
                    const pointX = flakeX + Math.cos(angle) * radius * variation;
                    const pointY = flakeY + Math.sin(angle) * radius * variation;
                   
                    if (j === 0) ctx.moveTo(pointX, pointY);
                    else ctx.lineTo(pointX, pointY);
                }
                ctx.closePath();
                ctx.fill();
            }
        }

        function createMicroScratches(x, y, pressure) {
            const microCount = Math.floor(2 + Math.random() * 4);
           
            for (let i = 0; i < microCount; i++) {
                const scratchAngle = Math.random() * Math.PI * 2;
                const scratchLength = (2 + Math.random() * 6) * pressure;
                const scratchX = x + (Math.random() - 0.5) * 8;
                const scratchY = y + (Math.random() - 0.5) * 8;
               
                ctx.globalAlpha = (Math.random() * 0.6 + 0.3) * pressure;
                ctx.lineWidth = (1 + Math.random() * 2) * pressure;
                ctx.lineCap = 'round';
               
                ctx.beginPath();
                ctx.moveTo(scratchX, scratchY);
                ctx.lineTo(
                    scratchX + Math.cos(scratchAngle) * scratchLength,
                    scratchY + Math.sin(scratchAngle) * scratchLength
                );
                ctx.stroke();
            }
        }

        function createDetailedScratchMark(x, y, pressure) {
            const scratchSize = (Math.random() * 4 + 1) * pressure;
            const scratchOpacity = (Math.random() * 0.7 + 0.2) * pressure;
            const scratchAngle = Math.random() * Math.PI * 2;
            const scratchLength = (3 + Math.random() * 8) * pressure;
           
            ctx.globalAlpha = scratchOpacity;
            ctx.lineWidth = scratchSize;
            ctx.lineCap = Math.random() > 0.5 ? 'round' : 'square';
           
            // Create branching scratch marks for realism
            ctx.beginPath();
            ctx.moveTo(x, y);
           
            const endX = x + Math.cos(scratchAngle) * scratchLength;
            const endY = y + Math.sin(scratchAngle) * scratchLength;
            ctx.lineTo(endX, endY);
           
            // Add small branches
            if (Math.random() > 0.6) {
                const branchAngle = scratchAngle + (Math.random() - 0.5) * 1.0;
                const branchLength = scratchLength * 0.3;
                const midX = x + Math.cos(scratchAngle) * scratchLength * 0.6;
                const midY = y + Math.sin(scratchAngle) * scratchLength * 0.6;
               
                ctx.moveTo(midX, midY);
                ctx.lineTo(
                    midX + Math.cos(branchAngle) * branchLength,
                    midY + Math.sin(branchAngle) * branchLength
                );
            }
           
            ctx.stroke();
        }

        function createScratchParticle(x, y) {
            const particleCount = 2 + Math.floor(Math.random() * 4); // Multiple particles
           
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'scratch-particle';
               
                // Varied particle sizes and colors
                const size = 2 + Math.random() * 6;
                const opacity = 0.4 + Math.random() * 0.6;
                const hue = 40 + Math.random() * 20; // Gold to bronze range
               
                particle.style.width = size + 'px';
                particle.style.height = size + 'px';
                particle.style.background = `hsla(${hue}, 70%, 60%, ${opacity})`;
                particle.style.left = (x + (Math.random() - 0.5) * 20) + 'px';
                particle.style.top = (y + (Math.random() - 0.5) * 20) + 'px';
               
                // Add random rotation and enhanced movement
                const rotation = Math.random() * 360;
                const drift = (Math.random() - 0.5) * 30;
                particle.style.transform = `rotate(${rotation}deg)`;
                particle.style.setProperty('--drift', drift + 'px');
               
                const container = document.querySelector('.scratch-container');
                container.appendChild(particle);
               
                // Stagger removal times for more realistic effect
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 600 + Math.random() * 400);
            }
        }

        function stopScratch() {
            isDrawing = false;
        }

        function checkScratchProgress() {
            if (prizeRevealed) return;
           
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            let transparent = 0;
           
            // Sample every 4th pixel for performance
            for (let i = 3; i < imageData.data.length; i += 16) {
                if (imageData.data[i] === 0) {
                    transparent++;
                }
            }
           
            const scratchPercentage = (transparent / (totalPixels / 4)) * 100;
           
            if (scratchPercentage > 60) {
                revealPrize();
            }
        }

        function revealPrize() {
            if (prizeRevealed) return;
            prizeRevealed = true;
           
            // Fade out scratch screen
            document.getElementById('scratch').style.opacity = '0';
           
            setTimeout(() => {
                document.getElementById('scratch').classList.remove('active');
               
                // Check if it's a "no win" result
                const prizeText = document.getElementById('hiddenPrize').textContent;
                const isNoWin = prizeText.includes("Better luck next time");
               
                if (isNoWin) {
                    // Show try again screen instead
                    showTryAgainScreen();
                } else {
                    // Show normal prize reveal
                    document.getElementById('reveal').classList.add('active');
                    document.getElementById('revealedPrize').textContent = prizeText;
                   
                    setTimeout(() => {
                        document.getElementById('prizeReveal').classList.add('show');
                    }, 100);
                }
            }, 600);
        }

        function showTryAgainScreen() {
            // Create try again screen if it doesn't exist
            let tryAgainScreen = document.getElementById('tryAgain');
            if (!tryAgainScreen) {
                tryAgainScreen = document.createElement('div');
                tryAgainScreen.id = 'tryAgain';
                tryAgainScreen.className = 'screen';
                tryAgainScreen.innerHTML = `
                    <div class="prize-reveal" id="tryAgainContent">
                        <h2 class="heading" style="font-size: 1.8rem; margin-bottom: 1rem;">Better luck next time!</h2>
                        <p class="subheading" style="margin-bottom: 2rem;">Your wellness journey continues. Try scratching again for another chance at a reward.</p>
                        <button class="btn btn-full" onclick="tryAgain()" style="margin-bottom: 1rem;">Try Again</button>
                        <p class="fine-print">You can try as many times as you'd like. Everyone wins eventually!</p>
                    </div>
                `;
                document.querySelector('.container').appendChild(tryAgainScreen);
            }
           
            tryAgainScreen.classList.add('active');
            setTimeout(() => {
                document.getElementById('tryAgainContent').classList.add('show');
            }, 100);
        }

        function tryAgain() {
            // Reset everything for another try
            prizeRevealed = false;
            scratchedPixels = 0;
           
            // Hide try again screen
            document.getElementById('tryAgain').classList.remove('active');
            document.getElementById('tryAgainContent').classList.remove('show');
           
            // Show scratch screen again
            setTimeout(() => {
                document.getElementById('scratch').classList.add('active');
                document.getElementById('scratch').style.opacity = '1';
                initScratchCard();
            }, 300);
        }

        function saveReward() {
            const email = document.getElementById('emailInput').value;
            const prizeText = document.getElementById('revealedPrize').textContent;
           
            if (!email || !email.includes('@')) {
                alert('Please enter a valid email address');
                return;
            }
           
            // Simulate sending email
            const button = event.target;
            const originalText = button.textContent;
           
            button.textContent = 'Sending...';
            button.disabled = true;
           
            setTimeout(() => {
                button.textContent = '✓ Sent to Email';
                button.style.background = '#D1B370';
                button.style.color = '#F4F0E9';
                button.style.borderColor = '#D1B370';
               
                // Show success message
                const successMsg = document.createElement('div');
                successMsg.style.cssText = `
                    margin-top: 1rem;
                    padding: 0.75rem 1rem;
                    background: rgba(46, 160, 67, 0.1);
                    color: #2EA043;
                    border-radius: 6px;
                    font-size: 0.875rem;
                    border: 1px solid rgba(46, 160, 67, 0.2);
                `;
                successMsg.textContent = `Reward details sent to ${email}`;
                button.parentNode.appendChild(successMsg);
               
                // In real implementation, this would send the actual email
                console.log('Email sent to:', email, 'with prize:', prizeText);
               
                setTimeout(() => {
                    button.disabled = false;
                }, 3000);
            }, 1500);
        }

        function navigateToOxigen() {
            const email = document.getElementById('emailInput').value;
            if (email && email.includes('@')) {
                console.log('Email saved:', email);
            }
           
            // Open Google Maps with Oxigen Center Vienna location
            const googleMapsUrl = 'https://maps.google.com/?q=Oxigen+Center+Vienna';
            window.open(googleMapsUrl, '_blank');
        }

        function bookNow() {
            const email = document.getElementById('emailInput').value;
            if (email && email.includes('@')) {
                console.log('Email saved:', email);
            }
           
            // Open Oxigen Vienna website for booking
            const oxigenWebsite = 'https://oxigen.at/en/booking';
            window.open(oxigenWebsite, '_blank');
        }

        function remindViaWhatsApp() {
            const email = document.getElementById('emailInput').value;
            const prizeText = document.getElementById('revealedPrize').textContent;
           
            // Generate WhatsApp message with reward details and real links
            const message = `🎁 Oxigen Vienna Reward: ${prizeText}\n\n📱 Show this message + screenshot at Oxigen Vienna\n📍 Valid for 30 days\n\n🗺️ Location: https://maps.google.com/?q=Oxigen+Center+Vienna\n🔗 Book: https://oxigen.at/en/booking`;
            const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;
           
            // Open WhatsApp with pre-filled message
            if (email && email.includes('@')) {
                console.log('Email saved for WhatsApp reminder:', email);
            }
           
            window.open(whatsappUrl, '_blank');
        }

        // Add initial fade-in animations
        window.addEventListener('load', () => {
            const elements = document.querySelectorAll('.fade-in');
            elements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, index * 200);
            });
        });
    </script>
</body>
</html>
